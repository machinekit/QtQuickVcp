/****************************************************************************
**
** This file was generated by a code generator based on imatix/gsl
** Any changes in this file will be lost.
**
****************************************************************************/
#include "filebase.h"
#include <google/protobuf/text_format.h>
#include "debughelper.h"

#if defined(Q_OS_IOS)
namespace gpb = google_public::protobuf;
#else
namespace gpb = google::protobuf;
#endif

using namespace nzmqt;

namespace machinetalk { namespace remotefile {

/** Generic File Base implementation */
FileBase::FileBase(QObject *parent)
    : QObject(parent)
    , QQmlParserStatus()
    , m_componentCompleted(false)
    , m_ready(false)
    , m_debugName(QStringLiteral("File Base"))
    , m_file2Channel(nullptr)
    , m_state(State::Down)
    , m_previousState(State::Down)
    , m_errorString(QStringLiteral(""))
{
    // initialize file2 channel
    m_file2Channel = new common::RpcClient(this);
    m_file2Channel->setDebugName(m_debugName + " - file2");
    connect(m_file2Channel, &common::RpcClient::socketUriChanged,
            this, &FileBase::file2UriChanged);
    connect(m_file2Channel, &common::RpcClient::stateChanged,
            this, &FileBase::file2ChannelStateChanged);
    connect(m_file2Channel, &common::RpcClient::socketMessageReceived,
            this, &FileBase::processFile2ChannelMessage);

    connect(m_file2Channel, &common::RpcClient::heartbeatIntervalChanged,
            this, &FileBase::file2HeartbeatIntervalChanged);
    // state machine
    connect(this, &FileBase::fsmDownEntered,
            this, &FileBase::fsmDownEntry);
    connect(this, &FileBase::fsmUpEntered,
            this, &FileBase::fsmUpEntry);
    connect(this, &FileBase::fsmDownConnect,
            this, &FileBase::fsmDownConnectEvent);
    connect(this, &FileBase::fsmTryingFile2Up,
            this, &FileBase::fsmTryingFile2UpEvent);
    connect(this, &FileBase::fsmTryingDisconnect,
            this, &FileBase::fsmTryingDisconnectEvent);
    connect(this, &FileBase::fsmUpFile2Trying,
            this, &FileBase::fsmUpFile2TryingEvent);
    connect(this, &FileBase::fsmUpDisconnect,
            this, &FileBase::fsmUpDisconnectEvent);
    connect(this, &FileBase::fsmUpGetMsgSent,
            this, &FileBase::fsmUpGetMsgSentEvent);
    connect(this, &FileBase::fsmUpPutMsgSent,
            this, &FileBase::fsmUpPutMsgSentEvent);
    connect(this, &FileBase::fsmUpLsMsgSent,
            this, &FileBase::fsmUpLsMsgSentEvent);
    connect(this, &FileBase::fsmUpMkdirMsgSent,
            this, &FileBase::fsmUpMkdirMsgSentEvent);
    connect(this, &FileBase::fsmUpDeleteMsgSent,
            this, &FileBase::fsmUpDeleteMsgSentEvent);
    connect(this, &FileBase::fsmGetGetSuccessful,
            this, &FileBase::fsmGetGetSuccessfulEvent);
    connect(this, &FileBase::fsmGetGetFailed,
            this, &FileBase::fsmGetGetFailedEvent);
    connect(this, &FileBase::fsmGetDisconnect,
            this, &FileBase::fsmGetDisconnectEvent);
    connect(this, &FileBase::fsmPutPutSuccessful,
            this, &FileBase::fsmPutPutSuccessfulEvent);
    connect(this, &FileBase::fsmPutPutFailed,
            this, &FileBase::fsmPutPutFailedEvent);
    connect(this, &FileBase::fsmPutDisconnect,
            this, &FileBase::fsmPutDisconnectEvent);
    connect(this, &FileBase::fsmLsLsSuccessful,
            this, &FileBase::fsmLsLsSuccessfulEvent);
    connect(this, &FileBase::fsmLsLsFailed,
            this, &FileBase::fsmLsLsFailedEvent);
    connect(this, &FileBase::fsmLsDisconnect,
            this, &FileBase::fsmLsDisconnectEvent);
    connect(this, &FileBase::fsmMkdirMkdirSuccessful,
            this, &FileBase::fsmMkdirMkdirSuccessfulEvent);
    connect(this, &FileBase::fsmMkdirMkdirFailed,
            this, &FileBase::fsmMkdirMkdirFailedEvent);
    connect(this, &FileBase::fsmMkdirDisconnect,
            this, &FileBase::fsmMkdirDisconnectEvent);
    connect(this, &FileBase::fsmDeleteDeleteSuccessful,
            this, &FileBase::fsmDeleteDeleteSuccessfulEvent);
    connect(this, &FileBase::fsmDeleteDeleteFailed,
            this, &FileBase::fsmDeleteDeleteFailedEvent);
    connect(this, &FileBase::fsmDeleteDisconnect,
            this, &FileBase::fsmDeleteDisconnectEvent);
}

FileBase::~FileBase()
{
}

void FileBase::startFile2Channel()
{
    m_file2Channel->setReady(true);
}

void FileBase::stopFile2Channel()
{
    m_file2Channel->setReady(false);
}

/** Processes all message received on file2 */
void FileBase::processFile2ChannelMessage(const Container &rx)
{

    // react to file listing message
    if (rx.type() == MT_FILE_LISTING)
    {

        if (m_state == State::Ls)
        {
            emit fsmLsLsSuccessful(QPrivateSignal());
        }
        handleFileListingMessage(rx);
    }

    // react to file data message
    else if (rx.type() == MT_FILE_DATA)
    {

        if (m_state == State::Get)
        {
            emit fsmGetGetSuccessful(QPrivateSignal());
        }
        handleFileDataMessage(rx);
    }

    // react to cmd complete message
    else if (rx.type() == MT_CMD_COMPLETE)
    {

        if (m_state == State::Mkdir)
        {
            emit fsmMkdirMkdirSuccessful(QPrivateSignal());
        }

        else if (m_state == State::Delete)
        {
            emit fsmDeleteDeleteSuccessful(QPrivateSignal());
        }

        else if (m_state == State::Put)
        {
            emit fsmPutPutSuccessful(QPrivateSignal());
        }
    }

    // react to error message
    else if (rx.type() == MT_ERROR)
    {

        // update error string with note
        m_errorString = "";
        for (int i = 0; i < rx.note_size(); ++i)
        {
            m_errorString.append(QString::fromStdString(rx.note(i)) + "\n");
        }
        emit errorStringChanged(m_errorString);

        if (m_state == State::Mkdir)
        {
            emit fsmMkdirMkdirFailed(QPrivateSignal());
        }

        else if (m_state == State::Delete)
        {
            emit fsmDeleteDeleteFailed(QPrivateSignal());
        }

        else if (m_state == State::Put)
        {
            emit fsmPutPutFailed(QPrivateSignal());
        }

        else if (m_state == State::Get)
        {
            emit fsmGetGetFailed(QPrivateSignal());
        }

        else if (m_state == State::Ls)
        {
            emit fsmLsLsFailed(QPrivateSignal());
        }
    }

    emit file2MessageReceived(rx);
}

void FileBase::sendFile2Message(ContainerType type, Container &tx)
{
    m_file2Channel->sendSocketMessage(type, tx);
    if (type == MT_FILE_GET)
    {

        if (m_state == State::Up)
        {
            emit fsmUpGetMsgSent(QPrivateSignal());
        }
    }
    else if (type == MT_FILE_PUT)
    {

        if (m_state == State::Up)
        {
            emit fsmUpPutMsgSent(QPrivateSignal());
        }
    }
    else if (type == MT_FILE_LS)
    {

        if (m_state == State::Up)
        {
            emit fsmUpLsMsgSent(QPrivateSignal());
        }
    }
    else if (type == MT_FILE_MKDIR)
    {

        if (m_state == State::Up)
        {
            emit fsmUpMkdirMsgSent(QPrivateSignal());
        }
    }
    else if (type == MT_FILE_DELETE)
    {

        if (m_state == State::Up)
        {
            emit fsmUpDeleteMsgSent(QPrivateSignal());
        }
    }
}

void FileBase::sendFileGet(Container &tx)
{
    sendFile2Message(MT_FILE_GET, tx);
}

void FileBase::sendFilePut(Container &tx)
{
    sendFile2Message(MT_FILE_PUT, tx);
}

void FileBase::sendFileLs(Container &tx)
{
    sendFile2Message(MT_FILE_LS, tx);
}

void FileBase::sendFileMkdir(Container &tx)
{
    sendFile2Message(MT_FILE_MKDIR, tx);
}

void FileBase::sendFileDelete(Container &tx)
{
    sendFile2Message(MT_FILE_DELETE, tx);
}

void FileBase::fsmDown()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State DOWN");
#endif
    m_state = State::Down;
    emit stateChanged(m_state);
}
void FileBase::fsmDownEntry()
{
    clearConnected();
}

void FileBase::fsmDownConnectEvent()
{
    if (m_state == State::Down)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event CONNECT");
#endif
        // handle state change
        emit fsmDownExited(QPrivateSignal());
        fsmTrying();
        emit fsmTryingEntered(QPrivateSignal());
        // execute actions
        startFile2Channel();
     }
}

void FileBase::fsmTrying()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State TRYING");
#endif
    m_state = State::Trying;
    emit stateChanged(m_state);
}

void FileBase::fsmTryingFile2UpEvent()
{
    if (m_state == State::Trying)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event FILE2 UP");
#endif
        // handle state change
        emit fsmTryingExited(QPrivateSignal());
        fsmUp();
        emit fsmUpEntered(QPrivateSignal());
        // execute actions
     }
}

void FileBase::fsmTryingDisconnectEvent()
{
    if (m_state == State::Trying)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif
        // handle state change
        emit fsmTryingExited(QPrivateSignal());
        fsmDown();
        emit fsmDownEntered(QPrivateSignal());
        // execute actions
        stopFile2Channel();
     }
}

void FileBase::fsmUp()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State UP");
#endif
    m_state = State::Up;
    emit stateChanged(m_state);
}
void FileBase::fsmUpEntry()
{
    setConnected();
}

void FileBase::fsmUpFile2TryingEvent()
{
    if (m_state == State::Up)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event FILE2 TRYING");
#endif
        // handle state change
        emit fsmUpExited(QPrivateSignal());
        fsmTrying();
        emit fsmTryingEntered(QPrivateSignal());
        // execute actions
     }
}

void FileBase::fsmUpDisconnectEvent()
{
    if (m_state == State::Up)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif
        // handle state change
        emit fsmUpExited(QPrivateSignal());
        fsmDown();
        emit fsmDownEntered(QPrivateSignal());
        // execute actions
        stopFile2Channel();
     }
}

void FileBase::fsmUpGetMsgSentEvent()
{
    if (m_state == State::Up)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event GET MSG SENT");
#endif
        // handle state change
        emit fsmUpExited(QPrivateSignal());
        fsmGet();
        emit fsmGetEntered(QPrivateSignal());
        // execute actions
        getCmdStarted();
     }
}

void FileBase::fsmUpPutMsgSentEvent()
{
    if (m_state == State::Up)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event PUT MSG SENT");
#endif
        // handle state change
        emit fsmUpExited(QPrivateSignal());
        fsmPut();
        emit fsmPutEntered(QPrivateSignal());
        // execute actions
        putCmdStarted();
     }
}

void FileBase::fsmUpLsMsgSentEvent()
{
    if (m_state == State::Up)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event LS MSG SENT");
#endif
        // handle state change
        emit fsmUpExited(QPrivateSignal());
        fsmLs();
        emit fsmLsEntered(QPrivateSignal());
        // execute actions
        lsCmdStarted();
     }
}

void FileBase::fsmUpMkdirMsgSentEvent()
{
    if (m_state == State::Up)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event MKDIR MSG SENT");
#endif
        // handle state change
        emit fsmUpExited(QPrivateSignal());
        fsmMkdir();
        emit fsmMkdirEntered(QPrivateSignal());
        // execute actions
        mkdirCmdStarted();
     }
}

void FileBase::fsmUpDeleteMsgSentEvent()
{
    if (m_state == State::Up)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event DELETE MSG SENT");
#endif
        // handle state change
        emit fsmUpExited(QPrivateSignal());
        fsmDelete();
        emit fsmDeleteEntered(QPrivateSignal());
        // execute actions
        deleteCmdStarted();
     }
}

void FileBase::fsmGet()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State GET");
#endif
    m_state = State::Get;
    emit stateChanged(m_state);
}

void FileBase::fsmGetGetSuccessfulEvent()
{
    if (m_state == State::Get)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event GET SUCCESSFUL");
#endif
        // handle state change
        emit fsmGetExited(QPrivateSignal());
        fsmUp();
        emit fsmUpEntered(QPrivateSignal());
        // execute actions
        getCmdSucceded();
     }
}

void FileBase::fsmGetGetFailedEvent()
{
    if (m_state == State::Get)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event GET FAILED");
#endif
        // handle state change
        emit fsmGetExited(QPrivateSignal());
        fsmUp();
        emit fsmUpEntered(QPrivateSignal());
        // execute actions
        getCmdFailed();
     }
}

void FileBase::fsmGetDisconnectEvent()
{
    if (m_state == State::Get)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif
        // handle state change
        emit fsmGetExited(QPrivateSignal());
        fsmDown();
        emit fsmDownEntered(QPrivateSignal());
        // execute actions
        stopFile2Channel();
     }
}

void FileBase::fsmPut()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State PUT");
#endif
    m_state = State::Put;
    emit stateChanged(m_state);
}

void FileBase::fsmPutPutSuccessfulEvent()
{
    if (m_state == State::Put)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event PUT SUCCESSFUL");
#endif
        // handle state change
        emit fsmPutExited(QPrivateSignal());
        fsmUp();
        emit fsmUpEntered(QPrivateSignal());
        // execute actions
        putCmdSucceded();
     }
}

void FileBase::fsmPutPutFailedEvent()
{
    if (m_state == State::Put)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event PUT FAILED");
#endif
        // handle state change
        emit fsmPutExited(QPrivateSignal());
        fsmUp();
        emit fsmUpEntered(QPrivateSignal());
        // execute actions
        putCmdFailed();
     }
}

void FileBase::fsmPutDisconnectEvent()
{
    if (m_state == State::Put)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif
        // handle state change
        emit fsmPutExited(QPrivateSignal());
        fsmDown();
        emit fsmDownEntered(QPrivateSignal());
        // execute actions
        stopFile2Channel();
     }
}

void FileBase::fsmLs()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State LS");
#endif
    m_state = State::Ls;
    emit stateChanged(m_state);
}

void FileBase::fsmLsLsSuccessfulEvent()
{
    if (m_state == State::Ls)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event LS SUCCESSFUL");
#endif
        // handle state change
        emit fsmLsExited(QPrivateSignal());
        fsmUp();
        emit fsmUpEntered(QPrivateSignal());
        // execute actions
        lsCmdSucceded();
     }
}

void FileBase::fsmLsLsFailedEvent()
{
    if (m_state == State::Ls)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event LS FAILED");
#endif
        // handle state change
        emit fsmLsExited(QPrivateSignal());
        fsmUp();
        emit fsmUpEntered(QPrivateSignal());
        // execute actions
        lsCmdFailed();
     }
}

void FileBase::fsmLsDisconnectEvent()
{
    if (m_state == State::Ls)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif
        // handle state change
        emit fsmLsExited(QPrivateSignal());
        fsmDown();
        emit fsmDownEntered(QPrivateSignal());
        // execute actions
        stopFile2Channel();
     }
}

void FileBase::fsmMkdir()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State MKDIR");
#endif
    m_state = State::Mkdir;
    emit stateChanged(m_state);
}

void FileBase::fsmMkdirMkdirSuccessfulEvent()
{
    if (m_state == State::Mkdir)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event MKDIR SUCCESSFUL");
#endif
        // handle state change
        emit fsmMkdirExited(QPrivateSignal());
        fsmUp();
        emit fsmUpEntered(QPrivateSignal());
        // execute actions
        mkdirCmdSucceded();
     }
}

void FileBase::fsmMkdirMkdirFailedEvent()
{
    if (m_state == State::Mkdir)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event MKDIR FAILED");
#endif
        // handle state change
        emit fsmMkdirExited(QPrivateSignal());
        fsmUp();
        emit fsmUpEntered(QPrivateSignal());
        // execute actions
        mkdirCmdFailed();
     }
}

void FileBase::fsmMkdirDisconnectEvent()
{
    if (m_state == State::Mkdir)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif
        // handle state change
        emit fsmMkdirExited(QPrivateSignal());
        fsmDown();
        emit fsmDownEntered(QPrivateSignal());
        // execute actions
        stopFile2Channel();
     }
}

void FileBase::fsmDelete()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State DELETE");
#endif
    m_state = State::Delete;
    emit stateChanged(m_state);
}

void FileBase::fsmDeleteDeleteSuccessfulEvent()
{
    if (m_state == State::Delete)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event DELETE SUCCESSFUL");
#endif
        // handle state change
        emit fsmDeleteExited(QPrivateSignal());
        fsmUp();
        emit fsmUpEntered(QPrivateSignal());
        // execute actions
        deleteCmdSucceded();
     }
}

void FileBase::fsmDeleteDeleteFailedEvent()
{
    if (m_state == State::Delete)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event DELETE FAILED");
#endif
        // handle state change
        emit fsmDeleteExited(QPrivateSignal());
        fsmUp();
        emit fsmUpEntered(QPrivateSignal());
        // execute actions
        deleteCmdFailed();
     }
}

void FileBase::fsmDeleteDisconnectEvent()
{
    if (m_state == State::Delete)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event DISCONNECT");
#endif
        // handle state change
        emit fsmDeleteExited(QPrivateSignal());
        fsmDown();
        emit fsmDownEntered(QPrivateSignal());
        // execute actions
        stopFile2Channel();
     }
}

void FileBase::file2ChannelStateChanged(common::RpcClient::State state)
{

    if (state == common::RpcClient::State::Trying)
    {
        if (m_state == State::Up)
        {
            emit fsmUpFile2Trying(QPrivateSignal());
        }
    }

    else if (state == common::RpcClient::State::Up)
    {
        if (m_state == State::Trying)
        {
            emit fsmTryingFile2Up(QPrivateSignal());
        }
    }
}

/** start trigger function */
void FileBase::start()
{
    if (m_state == State::Down) {
        emit fsmDownConnect(QPrivateSignal());
    }
}

/** stop trigger function */
void FileBase::stop()
{
    if (m_state == State::Trying) {
        emit fsmTryingDisconnect(QPrivateSignal());
    }
    else if (m_state == State::Up) {
        emit fsmUpDisconnect(QPrivateSignal());
    }
    else if (m_state == State::Get) {
        emit fsmGetDisconnect(QPrivateSignal());
    }
    else if (m_state == State::Put) {
        emit fsmPutDisconnect(QPrivateSignal());
    }
    else if (m_state == State::Ls) {
        emit fsmLsDisconnect(QPrivateSignal());
    }
    else if (m_state == State::Mkdir) {
        emit fsmMkdirDisconnect(QPrivateSignal());
    }
    else if (m_state == State::Delete) {
        emit fsmDeleteDisconnect(QPrivateSignal());
    }
}

} } // namespace machinetalk::remotefile
