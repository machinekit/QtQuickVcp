/****************************************************************************
**
** This file was generated by a code generator based on imatix/gsl
** Any changes in this file will be lost.
**
****************************************************************************/
#ifndef REMOTE_FILE_FILE_SERVICE_BASE_H
#define REMOTE_FILE_FILE_SERVICE_BASE_H
#include <QObject>
#include <QSet>
#include <QDebug>
#include <QQmlParserStatus>
#include <nzmqt/nzmqt.hpp>
#include <machinetalk/protobuf/message.pb.h>
#include "../common/rpcservice.h"

namespace machinetalk { namespace remotefile {

class FileServiceBase
    : public QObject
    , public QQmlParserStatus
{
    Q_OBJECT
    Q_INTERFACES(QQmlParserStatus)
    Q_PROPERTY(bool ready READ ready WRITE setReady NOTIFY readyChanged)
    Q_PROPERTY(QString file2Uri READ file2Uri WRITE setFile2Uri NOTIFY file2UriChanged)
    Q_PROPERTY(QString debugName READ debugName WRITE setDebugName NOTIFY debugNameChanged)
    Q_PROPERTY(State connectionState READ state NOTIFY stateChanged)
    Q_PROPERTY(QString errorString READ errorString NOTIFY errorStringChanged)

public:
    explicit FileServiceBase(QObject *parent = nullptr);
    ~FileServiceBase();

    enum class State {
        Down = 0,
        Trying = 1,
        Up = 2,
    };
    Q_ENUM(State)

    void classBegin() {}
    /** componentComplete is executed when the QML component is fully loaded */
    void componentComplete()
    {
        m_componentCompleted = true;

        if (m_ready == true)    // the component was set to ready before it was completed
        {
            start();
        }
    }

    QString file2Uri() const
    {
        return m_file2Channel->socketUri();
    }

    QString debugName() const
    {
        return m_debugName;
    }

    State state() const
    {
        return m_state;
    }

    QString errorString() const
    {
        return m_errorString;
    }

    bool ready() const
    {
        return m_ready;
    }

public slots:

    void setFile2Uri(const QString &uri)
    {
        m_file2Channel->setSocketUri(uri);
    }

    void setDebugName(const QString &debugName)
    {
        if (m_debugName == debugName) {
            return;
        }

        m_debugName = debugName;
        emit debugNameChanged(debugName);
    }

    void setReady(bool ready)
    {
        if (m_ready == ready) {
            return;
        }

        m_ready = ready;
        emit readyChanged(ready);

        if (m_componentCompleted == false)
        {
            return;
        }

        if (m_ready)
        {
            start();
        }
        else
        {
            stop();
        }
    }


    void sendFile2Message(const QByteArray &topic, ContainerType type, Container &tx);
    void sendPingAcknowledge(const QByteArray &topic, Container &tx);
    void sendFileData(const QByteArray &topic, Container &tx);
    void sendFileListing(const QByteArray &topic, Container &tx);
    void sendCmdComplete(const QByteArray &topic, Container &tx);
    void sendError(const QByteArray &topic, Container &tx);

protected:
    void start(); // start trigger
    void stop(); // stop trigger

private:
    bool m_componentCompleted;
    bool m_ready;
    QString m_debugName;

    common::RpcService *m_file2Channel;

    State         m_state;
    State         m_previousState;
    QString       m_errorString;
    // more efficient to reuse a protobuf Messages
    Container m_file2Rx;
    Container m_file2Tx;

private slots:

    void startFile2Channel();
    void stopFile2Channel();
    void file2ChannelStateChanged(common::RpcService::State state);
    void processFile2ChannelMessage(const QByteArray &topic, const Container &rx);

    void fsmDown();
    void fsmDownStartEvent();
    void fsmTrying();
    void fsmTryingFile2UpEvent();
    void fsmUp();
    void fsmUpStopEvent();

    virtual void handlePingMessage(const QByteArray &topic, const Container &rx) = 0;
    virtual void handleFileGetMessage(const QByteArray &topic, const Container &rx) = 0;
    virtual void handleFilePutMessage(const QByteArray &topic, const Container &rx) = 0;
    virtual void handleFileLsMessage(const QByteArray &topic, const Container &rx) = 0;
    virtual void handleFileMkdirMessage(const QByteArray &topic, const Container &rx) = 0;
    virtual void handleFileDeleteMessage(const QByteArray &topic, const Container &rx) = 0;

signals:
    void file2UriChanged(const QString &uri);
    void file2MessageReceived(const QByteArray &topic, const Container &rx);
    void debugNameChanged(const QString &debugName);
    void stateChanged(FileServiceBase::State state);
    void errorStringChanged(const QString &errorString);
    void readyChanged(bool ready);
    // fsm
    void fsmDownEntered(QPrivateSignal);
    void fsmDownExited(QPrivateSignal);
    void fsmDownStart(QPrivateSignal);
    void fsmTryingEntered(QPrivateSignal);
    void fsmTryingExited(QPrivateSignal);
    void fsmTryingFile2Up(QPrivateSignal);
    void fsmUpEntered(QPrivateSignal);
    void fsmUpExited(QPrivateSignal);
    void fsmUpStop(QPrivateSignal);
};

} } // namespace machinetalk::remotefile
#endif // REMOTE_FILE_FILE_SERVICE_BASE_H
