/****************************************************************************
**
** This file was generated by a code generator based on imatix/gsl
** Any changes in this file will be lost.
**
****************************************************************************/
#ifndef COMMON_SYNC_CLIENT_H
#define COMMON_SYNC_CLIENT_H
#include <QObject>
#include <QSet>
#include <QDebug>
#include <QQmlParserStatus>
#include <nzmqt/nzmqt.hpp>
#include <machinetalk/protobuf/message.pb.h>
#include "../common/rpcclient.h"
#include "../common/subscribe.h"
#include "../common/publish.h"

namespace machinetalk { namespace common {

class SyncClient
    : public QObject
    , public QQmlParserStatus
{
    Q_OBJECT
    Q_INTERFACES(QQmlParserStatus)
    Q_PROPERTY(bool ready READ ready WRITE setReady NOTIFY readyChanged)
    Q_PROPERTY(QString syncUri READ syncUri WRITE setSyncUri NOTIFY syncUriChanged)
    Q_PROPERTY(QString subUri READ subUri WRITE setSubUri NOTIFY subUriChanged)
    Q_PROPERTY(QString pubUri READ pubUri WRITE setPubUri NOTIFY pubUriChanged)
    Q_PROPERTY(QString debugName READ debugName WRITE setDebugName NOTIFY debugNameChanged)
    Q_PROPERTY(State connectionState READ state NOTIFY stateChanged)
    Q_PROPERTY(QString errorString READ errorString NOTIFY errorStringChanged)
    Q_PROPERTY(int syncHeartbeatInterval READ syncHeartbeatInterval WRITE setSyncHeartbeatInterval NOTIFY syncHeartbeatIntervalChanged)
    Q_PROPERTY(int subHeartbeatInterval READ subHeartbeatInterval WRITE setSubHeartbeatInterval NOTIFY subHeartbeatIntervalChanged)
    Q_PROPERTY(int pubHeartbeatInterval READ pubHeartbeatInterval WRITE setPubHeartbeatInterval NOTIFY pubHeartbeatIntervalChanged)

public:
    explicit SyncClient(QObject *parent = nullptr);
    ~SyncClient();

    enum class State {
        Down = 0,
        Trying = 1,
        Syncing = 2,
        Synced = 3,
    };
    Q_ENUM(State)

    void classBegin() {}
    /** componentComplete is executed when the QML component is fully loaded */
    void componentComplete()
    {
        m_componentCompleted = true;

        if (m_ready == true)    // the component was set to ready before it was completed
        {
            start();
        }
    }

    QString syncUri() const
    {
        return m_syncChannel->socketUri();
    }

    QString subUri() const
    {
        return m_subChannel->socketUri();
    }

    QString pubUri() const
    {
        return m_pubChannel->socketUri();
    }

    QString debugName() const
    {
        return m_debugName;
    }

    State state() const
    {
        return m_state;
    }

    QString errorString() const
    {
        return m_errorString;
    }

    int syncHeartbeatInterval() const
    {
        return m_syncChannel->heartbeatInterval();
    }

    int subHeartbeatInterval() const
    {
        return m_subChannel->heartbeatInterval();
    }

    int pubHeartbeatInterval() const
    {
        return m_pubChannel->heartbeatInterval();
    }

    bool ready() const
    {
        return m_ready;
    }

public slots:

    void setSyncUri(const QString &uri)
    {
        m_syncChannel->setSocketUri(uri);
    }

    void setSubUri(const QString &uri)
    {
        m_subChannel->setSocketUri(uri);
    }

    void setPubUri(const QString &uri)
    {
        m_pubChannel->setSocketUri(uri);
    }

    void setDebugName(const QString &debugName)
    {
        if (m_debugName == debugName) {
            return;
        }

        m_debugName = debugName;
        emit debugNameChanged(debugName);
    }

    void setSyncHeartbeatInterval(int interval)
    {
        m_syncChannel->setHeartbeatInterval(interval);
    }

    void setSubHeartbeatInterval(int interval)
    {
        m_subChannel->setHeartbeatInterval(interval);
    }

    void setPubHeartbeatInterval(int interval)
    {
        m_pubChannel->setHeartbeatInterval(interval);
    }

    void setReady(bool ready)
    {
        if (m_ready == ready) {
            return;
        }

        m_ready = ready;
        emit readyChanged(ready);

        if (m_componentCompleted == false)
        {
            return;
        }

        if (m_ready)
        {
            start();
        }
        else
        {
            stop();
        }
    }


    void sendSyncMessage(ContainerType type, Container &tx);

    void sendPubMessage(const QByteArray &topic, ContainerType type, Container &tx);
    void sendIncrementalUpdate(const QByteArray &topic, Container &tx);
    void addSubTopic(const QByteArray &name);
    void removeSubTopic(const QByteArray &name);
    void clearSubTopics();
    void addPubTopic(const QByteArray &name);
    void removePubTopic(const QByteArray &name);
    void clearPubTopics();

protected:
    void start(); // start trigger
    void stop(); // stop trigger

private:
    bool m_componentCompleted;
    bool m_ready;
    QString m_debugName;

    common::RpcClient *m_syncChannel;
    QSet<QByteArray> m_subTopics;      // the topics we are interested in
    common::Subscribe *m_subChannel;
    QSet<QByteArray> m_pubTopics;      // the topics we are interested in
    common::Publish *m_pubChannel;

    State         m_state;
    State         m_previousState;
    QString       m_errorString;
    // more efficient to reuse a protobuf Messages
    Container m_syncRx;
    Container m_syncTx;
    Container m_subRx;
    Container m_pubTx;

private slots:

    void startSyncChannel();
    void stopSyncChannel();
    void syncChannelStateChanged(common::RpcClient::State state);
    void processSyncChannelMessage(const Container &rx);
    void sendSync();

    void startSubChannel();
    void stopSubChannel();
    void subChannelStateChanged(common::Subscribe::State state);
    void processSubChannelMessage(const QByteArray &topic, const Container &rx);

    void startPubChannel();
    void stopPubChannel();

    void fsmDown();
    void fsmDownStartEvent();
    void fsmTrying();
    void fsmTryingSyncStateUpEvent();
    void fsmTryingStopEvent();
    void fsmSyncing();
    void fsmSyncingSyncStateTryingEvent();
    void fsmSyncingSubStateUpEvent();
    void fsmSyncingStopEvent();
    void fsmSynced();
    void fsmSyncedSubStateTryingEvent();
    void fsmSyncedSyncStateTryingEvent();
    void fsmSyncedStopEvent();


signals:
    void syncUriChanged(const QString &uri);
    void subUriChanged(const QString &uri);
    void pubUriChanged(const QString &uri);
    void syncMessageReceived(const Container &rx);
    void subMessageReceived(const QByteArray &topic, const Container &rx);
    void debugNameChanged(const QString &debugName);
    void stateChanged(SyncClient::State state);
    void errorStringChanged(const QString &errorString);
    void syncHeartbeatIntervalChanged(int interval);
    void subHeartbeatIntervalChanged(int interval);
    void pubHeartbeatIntervalChanged(int interval);
    void readyChanged(bool ready);
    // fsm
    void fsmDownEntered(QPrivateSignal);
    void fsmDownExited(QPrivateSignal);
    void fsmDownStart(QPrivateSignal);
    void fsmTryingEntered(QPrivateSignal);
    void fsmTryingExited(QPrivateSignal);
    void fsmTryingSyncStateUp(QPrivateSignal);
    void fsmTryingStop(QPrivateSignal);
    void fsmSyncingEntered(QPrivateSignal);
    void fsmSyncingExited(QPrivateSignal);
    void fsmSyncingSyncStateTrying(QPrivateSignal);
    void fsmSyncingSubStateUp(QPrivateSignal);
    void fsmSyncingStop(QPrivateSignal);
    void fsmSyncedEntered(QPrivateSignal);
    void fsmSyncedExited(QPrivateSignal);
    void fsmSyncedSubStateTrying(QPrivateSignal);
    void fsmSyncedSyncStateTrying(QPrivateSignal);
    void fsmSyncedStop(QPrivateSignal);
};

} } // namespace machinetalk::common
#endif // COMMON_SYNC_CLIENT_H
