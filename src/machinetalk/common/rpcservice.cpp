/****************************************************************************
**
** This file was generated by a code generator based on imatix/gsl
** Any changes in this file will be lost.
**
****************************************************************************/
#include "rpcservice.h"
#include <google/protobuf/text_format.h>
#include "debughelper.h"

#if defined(Q_OS_IOS)
namespace gpb = google_public::protobuf;
#else
namespace gpb = google::protobuf;
#endif

using namespace nzmqt;

namespace machinetalk { namespace common {

/** Generic RPC Service implementation */
RpcService::RpcService(QObject *parent)
    : QObject(parent)
    , m_ready(false)
    , m_debugName(QStringLiteral("RPC Service"))
    , m_socketUri(QStringLiteral(""))
    , m_context(nullptr)
    , m_socket(nullptr)
    , m_state(State::Down)
    , m_previousState(State::Down)
    , m_errorString(QStringLiteral(""))
{
    // state machine
    connect(this, &RpcService::fsmDownStart,
            this, &RpcService::fsmDownStartEvent);
    connect(this, &RpcService::fsmUpPingReceived,
            this, &RpcService::fsmUpPingReceivedEvent);
    connect(this, &RpcService::fsmUpStop,
            this, &RpcService::fsmUpStopEvent);

    m_context = new PollingZMQContext(this, 1);
    connect(m_context, &PollingZMQContext::pollError,
            this, &RpcService::socketError);
    m_context->start();
}

RpcService::~RpcService()
{
    stopSocket();

    if (m_context != nullptr)
    {
        m_context->stop();
        m_context->deleteLater();
        m_context = nullptr;
    }
}

/** Connects the 0MQ sockets */
bool RpcService::startSocket()
{
    m_socket = m_context->createSocket(ZMQSocket::TYP_ROUTER, this);
    m_socket->setLinger(0);

    try {
        m_socket->bindTo(m_socketUri);
    }
    catch (const zmq::error_t &e) {
        const QString errorString = QStringLiteral("Error %1: ").arg(e.num()) + QString(e.what());
        qCritical() << m_debugName << ":" << errorString;
        return false;
    }

    connect(m_socket, &ZMQSocket::messageReceived,
            this, &RpcService::processSocketMessage);


#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "sockets connected" << m_socketUri);
#endif

    return true;
}

/** Disconnects the 0MQ sockets */
void RpcService::stopSocket()
{
    if (m_socket != nullptr)
    {
        m_socket->close();
        m_socket->deleteLater();
        m_socket = nullptr;
    }
}

/** Processes all message received on socket */
void RpcService::processSocketMessage(const QList<QByteArray> &messageList)
{
    Container &rx = m_socketRx;

    if (messageList.length() < 2)  // in case we received insufficient data
    {
        return;
    }

    // we only handle the first two messges
    const auto &topic = messageList.first();
    rx.ParseFromArray(messageList.last().data(), messageList.last().size());

#ifdef QT_DEBUG
    std::string s;
    gpb::TextFormat::PrintToString(rx, &s);
    DEBUG_TAG(3, m_debugName, "received message" << QString::fromStdString(s));
#endif

    // react to ping message
    if (rx.type() == MT_PING)
    {

        if (m_state == State::Up)
        {
            emit fsmUpPingReceived(QPrivateSignal());
        }
        return; // ping is uninteresting
    }

    emit socketMessageReceived(topic, rx);
}

void RpcService::sendSocketMessage(const QByteArray &topic, ContainerType type, Container &tx)
{
    if (m_socket == nullptr) {  // disallow sending messages when not connected
        return;
    }

    tx.set_type(type);
#ifdef QT_DEBUG
    std::string s;
    gpb::TextFormat::PrintToString(tx, &s);
    DEBUG_TAG(3, m_debugName, "sent message" << QString::fromStdString(s));
#endif
    try {
        QList<QByteArray> message;
        message.append(topic);
        message.append(QByteArray(tx.SerializeAsString().c_str(), tx.ByteSize()));
        m_socket->sendMessage(message);
    }
    catch (const zmq::error_t &e) {
        const QString errorString = QStringLiteral("Error %1: ").arg(e.num()) + QString(e.what());
        qCritical() << errorString;
        return;
    }
    tx.Clear();
}

void RpcService::sendPingAcknowledge()
{
    Container &tx = m_socketTx;
    for (const auto &topic: qAsConst(m_socketTopics)) {
        sendSocketMessage(topic, MT_PING_ACKNOWLEDGE, tx);
    }
}

void RpcService::socketError(int errorNum, const QString &errorMsg)
{
    const QString errorString = QStringLiteral("Error %1: ").arg(errorNum) + errorMsg;
    qCritical() << errorString;
}

void RpcService::fsmDown()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State DOWN");
#endif
    m_state = State::Down;
    emit stateChanged(m_state);
}

void RpcService::fsmDownStartEvent()
{
    if (m_state == State::Down)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event START");
#endif
        // handle state change
        emit fsmDownExited(QPrivateSignal());
        fsmUp();
        emit fsmUpEntered(QPrivateSignal());
        // execute actions
        startSocket();
     }
}

void RpcService::fsmUp()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State UP");
#endif
    m_state = State::Up;
    emit stateChanged(m_state);
}

void RpcService::fsmUpPingReceivedEvent()
{
    if (m_state == State::Up)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event PING RECEIVED");
#endif
        // execute actions
        sendPingAcknowledge();
     }
}

void RpcService::fsmUpStopEvent()
{
    if (m_state == State::Up)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event STOP");
#endif
        // handle state change
        emit fsmUpExited(QPrivateSignal());
        fsmDown();
        emit fsmDownEntered(QPrivateSignal());
        // execute actions
        stopSocket();
     }
}

/** start trigger function */
void RpcService::start()
{
    if (m_state == State::Down) {
        emit fsmDownStart(QPrivateSignal());
    }
}

/** stop trigger function */
void RpcService::stop()
{
    if (m_state == State::Up) {
        emit fsmUpStop(QPrivateSignal());
    }
}

} } // namespace machinetalk::common
