/****************************************************************************
**
** This file was generated by a code generator based on imatix/gsl
** Any changes in this file will be lost.
**
****************************************************************************/
#include "syncclient.h"
#include <google/protobuf/text_format.h>
#include "debughelper.h"

#if defined(Q_OS_IOS)
namespace gpb = google_public::protobuf;
#else
namespace gpb = google::protobuf;
#endif

using namespace nzmqt;

namespace machinetalk { namespace common {

/** Generic Sync Client implementation */
SyncClient::SyncClient(QObject *parent)
    : QObject(parent)
    , QQmlParserStatus()
    , m_componentCompleted(false)
    , m_ready(false)
    , m_debugName(QStringLiteral("Sync Client"))
    , m_syncChannel(nullptr)
    , m_subChannel(nullptr)
    , m_pubChannel(nullptr)
    , m_state(State::Down)
    , m_previousState(State::Down)
    , m_errorString(QStringLiteral(""))
{
    // initialize sync channel
    m_syncChannel = new common::RpcClient(this);
    m_syncChannel->setDebugName(m_debugName + " - sync");
    connect(m_syncChannel, &common::RpcClient::socketUriChanged,
            this, &SyncClient::syncUriChanged);
    connect(m_syncChannel, &common::RpcClient::stateChanged,
            this, &SyncClient::syncChannelStateChanged);
    connect(m_syncChannel, &common::RpcClient::socketMessageReceived,
            this, &SyncClient::processSyncChannelMessage);
    // initialize sub channel
    m_subChannel = new common::Subscribe(this);
    m_subChannel->setDebugName(m_debugName + " - sub");
    connect(m_subChannel, &common::Subscribe::socketUriChanged,
            this, &SyncClient::subUriChanged);
    connect(m_subChannel, &common::Subscribe::stateChanged,
            this, &SyncClient::subChannelStateChanged);
    connect(m_subChannel, &common::Subscribe::socketMessageReceived,
            this, &SyncClient::processSubChannelMessage);
    // initialize pub channel
    m_pubChannel = new common::Publish(this);
    m_pubChannel->setDebugName(m_debugName + " - pub");
    connect(m_pubChannel, &common::Publish::socketUriChanged,
            this, &SyncClient::pubUriChanged);

    connect(m_syncChannel, &common::RpcClient::heartbeatIntervalChanged,
            this, &SyncClient::syncHeartbeatIntervalChanged);

    connect(m_subChannel, &common::Subscribe::heartbeatIntervalChanged,
            this, &SyncClient::subHeartbeatIntervalChanged);

    connect(m_pubChannel, &common::Publish::heartbeatIntervalChanged,
            this, &SyncClient::pubHeartbeatIntervalChanged);
    // state machine
    connect(this, &SyncClient::fsmDownStart,
            this, &SyncClient::fsmDownStartEvent);
    connect(this, &SyncClient::fsmTryingSyncStateUp,
            this, &SyncClient::fsmTryingSyncStateUpEvent);
    connect(this, &SyncClient::fsmTryingStop,
            this, &SyncClient::fsmTryingStopEvent);
    connect(this, &SyncClient::fsmSyncingSyncStateTrying,
            this, &SyncClient::fsmSyncingSyncStateTryingEvent);
    connect(this, &SyncClient::fsmSyncingSubStateUp,
            this, &SyncClient::fsmSyncingSubStateUpEvent);
    connect(this, &SyncClient::fsmSyncingStop,
            this, &SyncClient::fsmSyncingStopEvent);
    connect(this, &SyncClient::fsmSyncedSubStateTrying,
            this, &SyncClient::fsmSyncedSubStateTryingEvent);
    connect(this, &SyncClient::fsmSyncedSyncStateTrying,
            this, &SyncClient::fsmSyncedSyncStateTryingEvent);
    connect(this, &SyncClient::fsmSyncedStop,
            this, &SyncClient::fsmSyncedStopEvent);
}

SyncClient::~SyncClient()
{
}

/** Add a topic that should be subscribed **/
void SyncClient::addSubTopic(const QByteArray &name)
{
    m_subChannel->addSocketTopic(name);
}

/** Removes a topic from the list of topics that should be subscribed **/
void SyncClient::removeSubTopic(const QByteArray &name)
{
    m_subChannel->removeSocketTopic(name);
}

/** Clears the the topics that should be subscribed **/
void SyncClient::clearSubTopics()
{
    m_subChannel->clearSocketTopics();
}

/** Add a topic that should be subscribed **/
void SyncClient::addPubTopic(const QByteArray &name)
{
    m_pubChannel->addSocketTopic(name);
}

/** Removes a topic from the list of topics that should be subscribed **/
void SyncClient::removePubTopic(const QByteArray &name)
{
    m_pubChannel->removeSocketTopic(name);
}

/** Clears the the topics that should be subscribed **/
void SyncClient::clearPubTopics()
{
    m_pubChannel->clearSocketTopics();
}

void SyncClient::startSyncChannel()
{
    m_syncChannel->setReady(true);
}

void SyncClient::stopSyncChannel()
{
    m_syncChannel->setReady(false);
}

void SyncClient::startSubChannel()
{
    m_subChannel->setReady(true);
}

void SyncClient::stopSubChannel()
{
    m_subChannel->setReady(false);
}

void SyncClient::startPubChannel()
{
    m_pubChannel->setReady(true);
}

void SyncClient::stopPubChannel()
{
    m_pubChannel->setReady(false);
}

/** Processes all message received on sync */
void SyncClient::processSyncChannelMessage(const Container &rx)
{

    emit syncMessageReceived(rx);
}

/** Processes all message received on sub */
void SyncClient::processSubChannelMessage(const QByteArray &topic, const Container &rx)
{

    emit subMessageReceived(topic, rx);
}

void SyncClient::sendSyncMessage(ContainerType type, Container &tx)
{
    m_syncChannel->sendSocketMessage(type, tx);
}

void SyncClient::sendPubMessage(const QByteArray &topic, ContainerType type, Container &tx)
{
    m_pubChannel->sendSocketMessage(topic, type, tx);
}

void SyncClient::sendSync()
{
    Container &tx = m_syncTx;
    sendSyncMessage(MT_SYNC, tx);
}

void SyncClient::sendIncrementalUpdate(const QByteArray &topic, Container &tx)
{
    sendPubMessage(topic, MT_INCREMENTAL_UPDATE, tx);
}

void SyncClient::fsmDown()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State DOWN");
#endif
    m_state = State::Down;
    emit stateChanged(m_state);
}

void SyncClient::fsmDownStartEvent()
{
    if (m_state == State::Down)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event START");
#endif
        // handle state change
        emit fsmDownExited(QPrivateSignal());
        fsmTrying();
        emit fsmTryingEntered(QPrivateSignal());
        // execute actions
        startSyncChannel();
        startPubChannel();
     }
}

void SyncClient::fsmTrying()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State TRYING");
#endif
    m_state = State::Trying;
    emit stateChanged(m_state);
}

void SyncClient::fsmTryingSyncStateUpEvent()
{
    if (m_state == State::Trying)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event SYNC STATE UP");
#endif
        // handle state change
        emit fsmTryingExited(QPrivateSignal());
        fsmSyncing();
        emit fsmSyncingEntered(QPrivateSignal());
        // execute actions
        sendSync();
        startSubChannel();
     }
}

void SyncClient::fsmTryingStopEvent()
{
    if (m_state == State::Trying)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event STOP");
#endif
        // handle state change
        emit fsmTryingExited(QPrivateSignal());
        fsmDown();
        emit fsmDownEntered(QPrivateSignal());
        // execute actions
        stopSyncChannel();
        stopSubChannel();
        stopPubChannel();
     }
}

void SyncClient::fsmSyncing()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State SYNCING");
#endif
    m_state = State::Syncing;
    emit stateChanged(m_state);
}

void SyncClient::fsmSyncingSyncStateTryingEvent()
{
    if (m_state == State::Syncing)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event SYNC STATE TRYING");
#endif
        // handle state change
        emit fsmSyncingExited(QPrivateSignal());
        fsmTrying();
        emit fsmTryingEntered(QPrivateSignal());
        // execute actions
        stopSubChannel();
     }
}

void SyncClient::fsmSyncingSubStateUpEvent()
{
    if (m_state == State::Syncing)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event SUB STATE UP");
#endif
        // handle state change
        emit fsmSyncingExited(QPrivateSignal());
        fsmSynced();
        emit fsmSyncedEntered(QPrivateSignal());
        // execute actions
        synced();
     }
}

void SyncClient::fsmSyncingStopEvent()
{
    if (m_state == State::Syncing)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event STOP");
#endif
        // handle state change
        emit fsmSyncingExited(QPrivateSignal());
        fsmDown();
        emit fsmDownEntered(QPrivateSignal());
        // execute actions
        stopSyncChannel();
        stopSubChannel();
        stopPubChannel();
     }
}

void SyncClient::fsmSynced()
{
#ifdef QT_DEBUG
    DEBUG_TAG(1, m_debugName, "State SYNCED");
#endif
    m_state = State::Synced;
    emit stateChanged(m_state);
}

void SyncClient::fsmSyncedSubStateTryingEvent()
{
    if (m_state == State::Synced)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event SUB STATE TRYING");
#endif
        // handle state change
        emit fsmSyncedExited(QPrivateSignal());
        fsmSyncing();
        emit fsmSyncingEntered(QPrivateSignal());
        // execute actions
        sendSync();
     }
}

void SyncClient::fsmSyncedSyncStateTryingEvent()
{
    if (m_state == State::Synced)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event SYNC STATE TRYING");
#endif
        // handle state change
        emit fsmSyncedExited(QPrivateSignal());
        fsmTrying();
        emit fsmTryingEntered(QPrivateSignal());
        // execute actions
        stopSubChannel();
     }
}

void SyncClient::fsmSyncedStopEvent()
{
    if (m_state == State::Synced)
    {
#ifdef QT_DEBUG
        DEBUG_TAG(1, m_debugName, "Event STOP");
#endif
        // handle state change
        emit fsmSyncedExited(QPrivateSignal());
        fsmDown();
        emit fsmDownEntered(QPrivateSignal());
        // execute actions
        stopSyncChannel();
        stopSubChannel();
        stopPubChannel();
     }
}

void SyncClient::syncChannelStateChanged(common::RpcClient::State state)
{

    if (state == common::RpcClient::State::Trying)
    {
        if (m_state == State::Syncing)
        {
            emit fsmSyncingSyncStateTrying(QPrivateSignal());
        }
        else if (m_state == State::Synced)
        {
            emit fsmSyncedSyncStateTrying(QPrivateSignal());
        }
    }

    else if (state == common::RpcClient::State::Up)
    {
        if (m_state == State::Trying)
        {
            emit fsmTryingSyncStateUp(QPrivateSignal());
        }
    }
}

void SyncClient::subChannelStateChanged(common::Subscribe::State state)
{

    if (state == common::Subscribe::State::Trying)
    {
        if (m_state == State::Synced)
        {
            emit fsmSyncedSubStateTrying(QPrivateSignal());
        }
    }

    else if (state == common::Subscribe::State::Up)
    {
        if (m_state == State::Syncing)
        {
            emit fsmSyncingSubStateUp(QPrivateSignal());
        }
    }
}

/** start trigger function */
void SyncClient::start()
{
    if (m_state == State::Down) {
        emit fsmDownStart(QPrivateSignal());
    }
}

/** stop trigger function */
void SyncClient::stop()
{
    if (m_state == State::Trying) {
        emit fsmTryingStop(QPrivateSignal());
    }
    else if (m_state == State::Syncing) {
        emit fsmSyncingStop(QPrivateSignal());
    }
    else if (m_state == State::Synced) {
        emit fsmSyncedStop(QPrivateSignal());
    }
}

} } // namespace machinetalk::common
